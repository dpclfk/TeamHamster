name: Deploy project

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test_node:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensute SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: ADD SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: test node
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          export NVM_DIR="$HOME/.nvm"
          if [ -s "$NVM_DIR/nvm.sh" ]; then
            . "$NVM_DIR/nvm.sh"
          else
            echo "nvm.sh not found"
            exit 1
          fi

          nvm -v'

  test_mysql:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensute SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: ADD SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: check mysql
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          sudo service mysql status'

      - name: test mysql user
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SHOW DATABASES;"'

  test_mongo:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensute SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: ADD SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: check mongo
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          sudo service mongod start
          sudo service mongod status'

      - name: test mongo user
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          mongosh -u ${{ secrets.MONGO_USER }} -p ${{ secrets.MONGO_PASSWORD }} \
          --authenticationDatabase admin -eval "db.adminCommand({ listDatabases:1 })"'

  depoly_front:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensute SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: ADD SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Front
        working-directory: ./front
        run: npm i

      - name: Front env
        working-directory: ./front
        run: ${{ secrets.FRONT_ENV }}

      - name: Build Front
        working-directory: ./front
        run: npm run build

      - name: Delete map front
        working-directory: ./front/build
        run: rm -rf ./**/*/*.map

      - name: Install Dependencies of Delivery
        working-directory: ./delivery
        run: npm i

      - name: Delivery env
        working-directory: ./delivery
        run: ${{ secrets.DELIVERY_ENV }}

      - name: Build Delivery
        working-directory: ./delivery
        run: npm run build

      - name: Delete map delivery
        working-directory: ./delivery/build
        run: rm -rf ./**/*/*.map

      - name: Install Dependencies of manege
        working-directory: ./manege
        run: npm i

      - name: Manege env
        working-directory: ./manege
        run: ${{ secrets.MANEGE_ENV }}

      - name: Build manege
        working-directory: ./manege
        run: npm run build

      - name: Delete map manege
        working-directory: ./manege/build
        run: rm -rf ./**/*/*.map

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/market/front
            mkdir -p /var/www/market/front
            rm -p /var/www/market/delivery
            mkdir -p /var/www/market/delivery
            rm -p /var/www/market/admin
            mkdir -p /var/www/market/admin'
          rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/front
          rsync -avz -e "ssh" ./delivery/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/delivery
          rsync -avz -e "ssh" ./manege/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/admin

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  deploy_back:
    runs-on: ubuntu-latest
    needs:
      - test_node
      - test_mysql
      - test_mongo
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Back
        working-directory: ./backend
        run: npm i

      - name: server env
        working-directory: ./backend
        run: ${{ secrets.SERVER_ENV }}

      - name: config json
        working-directory: ./backend
        run: |
          echo   "{
           \"development\": {
              \"username\": \"${{ secrets.MYSQL_USER }}\",
              \"password\": \"${{ secrets.MYSQL_PASSWORD }}\",
              \"database\": \"${{ secrets.MYSQL_DATABASE }}\",
              \"host\": \"127.0.0.1\",
              \"dialect\": \"mysql\",
              \"timezone\": \"+09:00\"
            }
          }" > config/config.json

      - name: Build Back
        working-directory: ./backend
        run: npx tsc

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/market/backend
            mkdir /var/www/market/backend
            mkdir /var/www/market/backend/uploads'
          rsync -avz -e "ssh" ./backend/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/backend
          rsync -avz -e "ssh" ./backend/package.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/backend/package.json
          rsync -avz -e "ssh" ./backend/.env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/backend/.env
          rsync -avz -e "ssh" ./backend/uploads/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/market/backend/uploads
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi

            nvm use --lts
            cd /var/www/market/backend
            npm i --production'

      - name: Start Server
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi

            nvm use --lts
            
            npm install -g pm2
            pm2 stop marketbackend
            pm2 delete marketbackend
            pm2 start /var/www/market/backend/src/server.js --name "marketbackend"'
